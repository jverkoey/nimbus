//
// Copyright 2011 Jeff Verkoeyen
//
// Autogenerated by flex using the Nimbus CSS grammar
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include "CssTokens.h"

#line 3 "lex.css.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer css_create_buffer
#define yy_delete_buffer css_delete_buffer
#define yy_flex_debug css_flex_debug
#define yy_init_buffer css_init_buffer
#define yy_flush_buffer css_flush_buffer
#define yy_load_buffer_state css_load_buffer_state
#define yy_switch_to_buffer css_switch_to_buffer
#define yyin cssin
#define yyleng cssleng
#define yylex csslex
#define yylineno csslineno
#define yyout cssout
#define yyrestart cssrestart
#define yytext csstext
#define yywrap csswrap
#define yyalloc cssalloc
#define yyrealloc cssrealloc
#define yyfree cssfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cssrestart(cssin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t cssleng;

extern FILE *cssin, *cssout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up csstext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up csstext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cssrestart()), so that the user can continue scanning by
	 * just pointing cssin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when csstext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t cssleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow csswrap()'s to do buffer switches
 * instead of setting up a fresh cssin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cssrestart (FILE *input_file  );
void css_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE css_create_buffer (FILE *file,int size  );
void css_delete_buffer (YY_BUFFER_STATE b  );
void css_flush_buffer (YY_BUFFER_STATE b  );
void csspush_buffer_state (YY_BUFFER_STATE new_buffer  );
void csspop_buffer_state (void );

static void cssensure_buffer_stack (void );
static void css_load_buffer_state (void );
static void css_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER css_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE css_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE css_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE css_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *cssalloc (yy_size_t  );
void *cssrealloc (void *,yy_size_t  );
void cssfree (void *  );

#define yy_new_buffer css_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cssensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            css_create_buffer(cssin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cssensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            css_create_buffer(cssin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cssin = (FILE *) 0, *cssout = (FILE *) 0;

typedef int yy_state_type;

extern int csslineno;

int csslineno = 1;

extern char *csstext;
#define yytext_ptr csstext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up csstext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cssleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 41
#define YY_END_OF_BUFFER 42
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[370] =
    {   0,
        0,    0,   42,   40,    1,    1,   40,   40,   40,   40,
       40,   40,   40,   34,   40,   40,    8,    8,   40,   40,
       40,    1,    0,    0,    7,    0,    9,    9,    8,    0,
        0,    0,    0,    0,   34,    8,    0,    0,   34,    8,
        0,    0,   33,    0,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   29,    0,    0,    0,    0,
        0,    0,    0,    0,   37,    8,    0,    0,    0,    0,
        8,    8,    8,    6,    5,    0,    0,    0,    7,    0,
        0,    0,    8,    0,    8,    8,    0,    0,    7,    0,
        0,    4,    8,    0,    8,    8,    0,    0,   32,    0,

       20,   32,   17,   18,   32,   30,   22,   32,   21,   28,
       24,   23,   19,   32,   32,   32,    0,    0,    0,    0,
        0,    0,    0,    0,    8,    0,    0,    8,    0,    8,
        8,   38,   38,    8,    8,    0,    0,    0,    9,    9,
        8,    8,    8,    0,    0,    8,    8,    8,    0,    0,
        2,   32,   32,   25,   32,   31,   26,   32,    3,    0,
        0,    0,    0,    0,    0,    8,    0,    8,    8,    8,
        0,    8,    8,    8,    0,   38,   38,   38,   37,    8,
        0,    0,    9,    8,    8,    0,    8,    8,    0,    0,
        0,    0,    2,   32,   27,   32,    0,    0,    0,    0,

        0,   11,    8,    8,    8,    8,    8,    8,    8,   39,
       38,   38,   38,   38,    0,    0,    0,    0,   36,    0,
        8,    0,    0,    9,    8,    8,    0,    8,    8,    0,
       32,   32,    0,    0,    0,   12,    0,    8,    8,    8,
        8,    8,   39,   38,   38,   38,   38,   38,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   36,    0,    0,
        8,    0,    0,    9,    8,    8,    0,    8,    8,   32,
       32,    0,    0,   10,    0,    8,    8,    8,    8,    8,
       39,   38,   38,   38,   38,   38,   38,    0,   35,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        8,    0,    0,    9,    8,    8,    0,    8,    8,   32,
       32,   14,    0,    0,    8,    8,    8,    8,    8,   39,
       38,   38,   38,   38,   38,   38,   38,    0,   35,    0,
        0,    0,   35,    0,    0,    0,    0,    9,    8,    8,
       32,    0,    0,    8,    8,    8,    8,   39,    0,    0,
        0,    0,   13,   15,    8,    8,   39,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   16,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   10,   12,   13,
       14,   15,   16,   10,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   10,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       36,   43,   44,   45,   46,   36,   47,   48,   36,   49,
       10,   50,   10,   10,   10,   10,   51,   28,   52,   53,

       54,   55,   56,   57,   58,   36,   59,   60,   61,   62,
       63,   64,   36,   65,   66,   67,   68,   36,   69,   70,
       36,   71,   72,   73,   74,   75,    1,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76
    } ;

static yyconst flex_int32_t yy_meta[77] =
    {   0,
        1,    2,    3,    4,    4,    5,    6,    7,    6,    6,
        6,    7,    8,    6,    6,    6,    9,   10,    6,   11,
       12,    6,    6,    6,   13,    6,   14,   14,   14,   14,
       14,   14,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       14,   14,   14,   14,   14,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,    6,    6,    6,    6,   15
    } ;

static yyconst flex_int16_t yy_base[448] =
    {   0,
        0,    0,  882, 6624,   75,   80,  803,   79,   71,   77,
       75,   80,  858,  120,  865,  168,   83,  188,  234,  831,
      830,  103,   43,   86, 6624,  288,   82,  802,   92,  324,
       91,  378,  827,  830,    0,  198,  414,   94,   97,  174,
      450,  834, 6624,  798,  797,   84,   85,  186,  162,  144,
      178,  164,  207,  230,  233,  796,  486,  828,   86,   83,
      174,  168,   71,  190, 6624,  224,  222,  226,  522,  819,
      285,  231,  576, 6624, 6624,  762,  296,  259,  261,  630,
      684,  720,  284,  756,  307,  810,  298,  221,  282,  864,
      918, 6624,  308,  954,  309, 1008,  820,  318,  784, 1044,

      783,  314,  782,  779,  322,  777,  776,  313,  774,  773,
      772,  771,  770,  335,  769, 1098,  801,  228,  274,  325,
      338,  332,  336,  344,  397, 1134,  767,  756, 1170,  398,
     1224,  101,  780,  399, 1278,  339,  262, 1332,  753, 1386,
      403, 1440, 1494,  310, 1548,  404, 1602, 1656,  787,  380,
     6624,  750, 1710,  744,  373,  743,  740, 1764, 6624,  370,
      369,  396,  369,  407,  408,  434, 1800,  439, 1854,  732,
     1890,  682, 1944, 1980,    0,  233,  705,  675,  517, 2034,
      411, 2088, 2142, 2178, 2232, 2286, 2322, 2358,  683,  381,
      638,  456,  636, 2394, 2448, 2502,  407,  630,  420,  280,

      420, 6624,  474, 2556, 2610,  591, 2664, 2718, 2754,    0,
      296,  612,  567,  511,  640,  691,  316,  390, 6624, 2808,
     2862,  432, 2916, 2970, 3024, 3078, 3132, 3186, 3240,  468,
     3276, 3312,  445,  456,  445, 6624,  466, 3348, 3384, 3420,
     3456, 3492,    0,  509,  472,  468,  466,  376,  541,  448,
      554, 3546,  482, 3600,  704,  717,  754,  775, 3654, 3708,
     3762,  507, 3816, 3870, 3924, 3978, 4032, 4086, 4140, 4194,
     4248,  516,  482, 6624,  535, 4284, 4320, 4356, 4392, 4428,
        0,  510,  325,  270,  252,  177,  103,  596, 6624,  561,
      450,  875, 4482, 4536,  516,  606,  929, 4590, 4644, 4698,

     4734,  520,  617, 4788, 4842,  853,  667, 4896,  906, 4932,
     4986, 6624,  536,  543, 5040, 5094, 5130, 5166,  610,    0,
      102, 6624, 6624, 6624, 6624, 6624, 6624,  949,  616,  641,
     5202, 1018,  652,  741, 5238, 5292,  526, 5328,  998, 1087,
      672,  586,  670, 5364, 5400, 5436, 5472,    0, 5508, 5544,
     5580,  612, 6624, 6624,  723,  759, 6624, 5616, 5652, 5688,
      693, 5724, 5760, 1107,  725,  793, 1082, 6624, 6624, 5814,
     5821, 5835, 5842, 5849, 5857, 5868, 5882, 5889, 5896, 5907,
     5921, 5928, 5939, 5954,  372, 5961, 5972, 5979, 5986, 5997,
     6002, 6012, 6023, 6034, 6049, 6060, 6067, 6078,  576, 6085,

     6096, 6103, 6116, 6123, 6137, 6152, 6167, 6178, 6189,  496,
     6196, 6209, 6223, 6237, 6252, 6267,  573, 6274, 6287, 6301,
     6315, 6329, 6343, 6357, 6371, 6385, 6399, 6414,  654, 6421,
     6434, 6448, 6462, 6476, 6490, 6504, 6518, 6532, 6546,  731,
     6553, 6566, 6580, 6594, 6608,  732,  755
    } ;

static yyconst flex_int16_t yy_def[448] =
    {   0,
      369,    1,  369,  369,  369,  369,  369,  370,  371,  372,
      373,  374,  369,  369,  369,  369,  375,  375,  376,  369,
      369,  369,  369,  370,  369,  377,  371,  378,  379,  380,
      372,  381,  369,  369,   14,  375,  376,  374,   14,  382,
      383,  384,  369,  385,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  387,  369,  369,  369,
      369,  369,  369,  369,  369,  375,  388,  389,  390,  391,
      375,  375,  375,  369,  369,  369,  370,  370,  370,  370,
      377,  392,  379,  393,  379,  379,  372,  372,  372,  372,
      381,  369,  382,  394,  382,  382,  384,  395,  386,  396,

      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  369,  369,  369,  369,
      369,  369,  369,  388,  397,  398,  399,  400,  401,  375,
      375,  402,  369,  375,  131,  369,  403,  403,  404,  404,
      379,  379,  142,  405,  405,  382,   96,  147,  406,  407,
      369,  386,  116,  386,  386,  386,  386,  153,  369,  369,
      369,  369,  369,  369,  369,  397,  408,  397,  397,  400,
      409,  400,  400,  131,  410,  411,  369,  369,  412,  131,
      369,  413,  414,  142,  142,  405,  147,  148,  406,  415,
      406,  416,  406,  153,  153,  153,  369,  369,  369,  369,

      369,  369,  397,  397,  204,  400,  400,  207,  131,  417,
      418,  369,  369,  369,  419,  419,  420,  421,  369,  422,
      131,  369,  423,  424,  425,  425,  426,  427,  427,  428,
      153,  196,  369,  369,  369,  369,  369,  204,  205,  207,
      208,  131,  429,  430,  369,  369,  369,  369,  369,  420,
      369,  431,  421,  432,  433,  433,  433,  433,  433,  434,
      131,  369,  435,  436,  437,  437,  438,  439,  439,  232,
      270,  369,  369,  369,  369,  204,  239,  207,  241,  131,
      440,  441,  369,  369,  369,  369,  369,  369,  369,  420,
      420,  420,  420,  442,  443,  443,  443,  443,  444,  445,

      261,  369,  435,  436,  266,  437,  438,  269,  439,  270,
      270,  369,  369,  369,  277,  315,  207,  279,  301,  446,
      369,  369,  369,  369,  369,  369,  369,  420,  420,  420,
      293,  443,  443,  443,  298,  445,  369,  304,  437,  439,
      311,  369,  369,  315,  316,  317,  318,  447,  293,  298,
      336,  369,  369,  369,  345,  347,  369,  293,  298,  336,
      369,  293,  298,  445,  369,  420,  443,  369,    0,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369
    } ;

static yyconst flex_int16_t yy_nxt[6701] =
    {   0,
        4,    5,    6,    5,    5,    5,    7,    8,    9,    4,
        4,   10,    4,    4,    4,    4,   11,   12,   13,   14,
        4,   15,    4,    4,    4,   16,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   18,   17,   17,   17,   19,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   17,   17,
       17,    4,   20,    4,   21,   17,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   25,   27,   25,   76,
       28,   33,   34,   25,   35,   65,   38,  122,   28,   39,

       67,   28,   25,   68,   22,   22,   22,   22,   22,   67,
      369,   76,   68,  369,  369,  102,   39,  175,  175,  118,
       30,  122,  101,  119,   37,  177,   32,  327,   26,   41,
       43,   30,   69,  100,  100,   26,   44,   34,  102,   35,
       32,   84,  118,   41,  101,  119,   45,   45,   46,   47,
       48,   45,   49,   50,   51,   45,   52,   45,   53,   45,
       45,   54,   55,   56,   45,   45,   45,   45,   45,   57,
       45,   46,   47,   48,   45,   49,   50,   51,   52,   45,
       53,   45,   45,   54,   55,   56,   45,   45,   45,   45,
       45,   67,  106,  100,   68,   45,   59,  108,  121,   60,

       65,  326,   61,   70,  105,   67,   62,   63,   68,   64,
       65,  100,  120,  100,  106,   67,  123,  107,   68,   59,
      108,  121,   60,   94,  103,   61,  105,  100,   62,   63,
       71,   64,   25,  104,  120,  100,   65,   69,  124,  107,
      123,   67,  127,   65,   68,  109,  103,   69,   67,  175,
      110,   68,   71,   73,  160,  104,  100,  212,  111,  114,
       73,   73,   73,   73,   73,   73,   25,  109,   25,   25,
       32,  126,  110,   69,  112,  129,  325,  113,  160,  100,
       69,  111,  100,  114,   73,   73,   73,   73,   73,   24,
       24,   24,   77,   25,  324,   79,  112,   65,   24,  113,

       31,   67,   67,   25,   68,   68,  236,   80,   26,   25,
       26,   26,  175,  161,   80,   80,   80,   80,   80,   80,
      245,   25,  134,  251,   67,   67,   67,   68,   68,   68,
      236,   32,  150,   84,   69,  161,  151,   81,   80,   80,
       80,   80,   80,   86,  134,   26,  154,   32,  155,  323,
       86,   86,   86,   86,   86,   86,   84,   94,   94,   32,
      369,  156,  100,  100,  157,  252,  162,  163,  165,  154,
      164,  100,  155,  181,   86,   86,   86,   86,   86,   31,
       31,   31,   87,  156,  100,   45,   45,  157,  162,   89,
      163,  165,  164,  126,  192,  230,  181,   90,  193,  151,

      287,  251,  195,  200,   90,   90,   90,   90,   90,   90,
       65,  179,  197,  198,   67,   67,   67,   68,   68,   68,
       67,   67,  100,   68,   68,  195,  200,   91,   90,   90,
       90,   90,   90,   73,  197,  198,  199,  201,  202,  254,
       73,   73,   73,   73,   73,   73,  167,   69,   69,  222,
      233,   67,   84,   94,   68,  251,   67,  251,  199,   68,
      201,  202,  235,  237,   73,   73,   73,   73,   73,   96,
      192,  222,  233,  262,  193,  272,   96,   96,   96,   96,
       96,   96,  230,  167,  235,  237,  193,  273,  167,  274,
      286,   67,  285,  251,   68,  262,  284,  252,  272,  252,

       96,   96,   96,   96,   96,  116,  210,  275,  313,  210,
      273,  274,  116,  116,  116,  116,  116,  116,  215,  215,
      215,  215,  215,  167,  217,  175,  175,  251,  218,  275,
      219,  254,  313,  283,  322,  248,  116,  116,  116,  116,
      116,  131,  249,  249,  249,  249,  249,  302,  131,  131,
      131,  131,  131,  131,  219,  288,  288,  288,  288,  288,
      312,  314,  337,  250,  342,  254,  220,  289,  251,  302,
      352,  343,  131,  131,  131,  131,  131,   72,   72,   72,
       72,   72,  312,  243,  337,  314,  243,  342,   65,  128,
      128,  247,  352,   67,  343,  135,   68,  288,  288,  288,

      288,  288,  135,  135,  135,  135,  135,  135,  369,  289,
      252,  130,  130,  130,  130,  130,  353,  251,   78,  137,
      137,  137,   78,  251,   25,   69,  135,  135,  135,  135,
      135,   78,  137,  137,  137,   78,  246,   25,  361,  353,
      171,  215,  215,  215,  215,  215,  234,  217,  251,  138,
      190,  218,  190,  219,  369,  254,  138,  138,  138,  138,
      138,  138,  361,  251,  281,  252,   26,  281,   88,  144,
      144,  144,   88,  152,  152,  152,  152,  152,   25,   26,
      138,  138,  138,  138,  138,   24,   24,   24,   77,  220,
      252,   79,  249,  249,  249,  249,  249,  190,  369,  214,

      354,  254,  369,   80,  219,  249,  249,  249,  249,  249,
       80,   80,   80,   80,   80,   80,   32,  219,  249,  249,
      249,  249,  249,  354,  203,  203,  203,  203,  203,  213,
      219,  171,  365,   81,   80,   80,   80,   80,   80,  140,
      220,  320,  348,  369,  320,  348,  140,  140,  140,  140,
      140,  140,  251,  220,  365,  249,  249,  249,  249,  249,
      206,  206,  206,  206,  206,  357,  220,  219,  357,  368,
      140,  140,  140,  140,  140,  142,  249,  249,  249,  249,
      249,  171,  142,  142,  142,  142,  142,  142,  219,  100,
      254,  368,  100,  100,  291,  330,  330,  330,  291,  100,

      251,  190,   82,  220,  178,  171,  142,  142,  142,  142,
      142,   85,   85,   85,   85,   85,  129,  159,  100,  100,
      100,  100,  100,  100,  220,  100,  100,   67,  100,  143,
       68,  100,  100,  100,   98,  136,  143,  143,  143,  143,
      143,  143,  252,  133,  117,  100,  100,   57,   98,   39,
       92,   82,   75,   74,   85,   85,   85,   85,   85,   84,
      143,  143,  143,  143,  143,   88,  144,  144,  144,   88,
       67,   58,   42,   68,   23,   25,  328,  288,  288,  288,
      328,  369,  251,  145,  369,  369,  369,  369,  329,  369,
      145,  145,  145,  145,  145,  145,  369,  369,  369,  369,

      369,  369,   84,  369,  369,  369,  369,   95,   95,   95,
       95,   95,  369,   32,  145,  145,  145,  145,  145,   31,
       31,   31,   87,   67,  252,  369,   68,  369,  369,   89,
      332,  288,  288,  288,  332,  369,  369,   90,  369,  369,
      251,  369,  333,  369,   90,   90,   90,   90,   90,   90,
      328,  288,  288,  288,  328,   94,  251,  369,  369,  369,
      369,  369,  329,  369,  369,  369,  369,   91,   90,   90,
       90,   90,   90,  147,  369,  369,  369,  369,  254,  369,
      147,  147,  147,  147,  147,  147,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  252,  141,

      141,  141,  141,  141,  147,  147,  147,  147,  147,   95,
       95,   95,   95,   95,  369,   67,  369,  369,   68,  332,
      288,  288,  288,  332,  369,   67,  369,  148,   68,  251,
      369,  333,  369,  369,  148,  148,  148,  148,  148,  148,
      369,  369,  369,  369,  369,  369,  369,   84,  369,  369,
      369,  369,  369,  369,  369,  369,  369,   94,  148,  148,
      148,  148,  148,  153,  369,  369,  369,  254,  369,  369,
      153,  153,  153,  153,  153,  153,  369,  369,  369,  369,
      369,  369,  369,  296,  334,  334,  334,  296,  146,  146,
      146,  146,  146,  251,  153,  153,  153,  153,  153,  115,

      115,  115,  115,  115,   67,  369,  369,   68,  255,  255,
      255,  255,  255,  369,  369,  369,  369,  158,  369,  369,
      219,  369,  369,  369,  158,  158,  158,  158,  158,  158,
      369,  254,  369,  369,  369,  369,   94,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  100,  158,  158,
      158,  158,  158,  169,  369,  369,  220,  369,  369,  369,
      169,  169,  169,  169,  169,  169,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  169,  169,  169,  169,  169,  173,
      369,  369,  369,  369,  369,  369,  173,  173,  173,  173,

      173,  173,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      173,  173,  173,  173,  173,  130,  130,  130,  130,  130,
      369,  369,  369,  369,  369,  369,   65,  369,  369,  369,
      369,   67,  369,  174,   68,  369,  369,  369,  369,  369,
      174,  174,  174,  174,  174,  174,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,   69,  174,  174,  174,  174,  174,   72,
       72,   72,   72,   72,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  180,  369,  369,

      369,  369,  369,  369,  180,  180,  180,  180,  180,  180,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  180,  180,
      180,  180,  180,   78,  137,  137,  137,   78,  369,   25,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  182,  369,  369,  369,  369,  369,  369,  182,  182,
      182,  182,  182,  182,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,   26,  182,  182,  182,  182,  182,  139,  139,  139,
      139,  139,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  183,  369,  369,  369,  369,
      369,  369,  183,  183,  183,  183,  183,  183,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,   82,  183,  183,  183,  183,
      183,  141,  141,  141,  141,  141,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,   67,  369,  184,
       68,  369,  369,  369,  369,  369,  184,  184,  184,  184,
      184,  184,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,   84,
      184,  184,  184,  184,  184,   85,   85,   85,   85,   85,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  185,  369,  369,  369,  369,  369,  369,
      185,  185,  185,  185,  185,  185,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  185,  185,  185,  185,  185,   88,
      144,  144,  144,   88,  369,  369,  369,  369,  369,   25,
      369,  369,  369,  369,  369,  369,  369,  186,  369,  369,
      369,  369,  369,  369,  186,  186,  186,  186,  186,  186,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,   32,  186,  186,

      186,  186,  186,  146,  146,  146,  146,  146,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  187,  369,  369,  369,  369,  369,  369,  187,  187,
      187,  187,  187,  187,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  187,  187,  187,  187,  187,   95,   95,   95,
       95,   95,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  188,  369,  369,  369,  369,
      369,  369,  188,  188,  188,  188,  188,  188,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  188,  188,  188,  188,
      188,  152,  152,  152,  152,  152,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  194,
      369,  369,  369,  369,  369,  369,  194,  194,  194,  194,
      194,  194,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      194,  194,  194,  194,  194,  115,  115,  115,  115,  115,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  196,  369,  369,  369,  369,  369,  369,
      196,  196,  196,  196,  196,  196,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  196,  196,  196,  196,  196,  204,
      369,  369,  369,  369,  369,  369,  204,  204,  204,  204,
      204,  204,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      204,  204,  204,  204,  204,  168,  168,  168,  168,  168,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,   67,  369,  205,   68,  369,  369,  369,  369,  369,
      205,  205,  205,  205,  205,  205,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  167,  205,  205,  205,  205,  205,  207,
      369,  369,  369,  369,  369,  369,  207,  207,  207,  207,
      207,  207,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      207,  207,  207,  207,  207,  172,  172,  172,  172,  172,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  208,  369,  369,  369,  369,  369,  369,
      208,  208,  208,  208,  208,  208,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  171,  208,  208,  208,  208,  208,  209,

      369,  369,  369,  369,  369,  369,  209,  209,  209,  209,
      209,  209,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      209,  209,  209,  209,  209,   72,   72,   72,   72,   72,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  221,  369,  369,  369,  369,  369,  369,
      221,  221,  221,  221,  221,  221,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  221,  221,  221,  221,  221,   78,
      137,  137,  137,   78,  369,   25,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  223,  369,  369,
      369,  369,  369,  369,  223,  223,  223,  223,  223,  223,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,   26,  223,  223,
      223,  223,  223,  139,  139,  139,  139,  139,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  224,  369,  369,  369,  369,  369,  369,  224,  224,
      224,  224,  224,  224,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,   82,  224,  224,  224,  224,  224,  225,  369,  369,

      369,  369,  369,  369,  225,  225,  225,  225,  225,  225,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  225,  225,
      225,  225,  225,   85,   85,   85,   85,   85,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  226,  369,  369,  369,  369,  369,  369,  226,  226,
      226,  226,  226,  226,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  226,  226,  226,  226,  226,   88,  144,  144,
      144,   88,  369,  369,  369,  369,  369,   25,  369,  369,

      369,  369,  369,  369,  369,  227,  369,  369,  369,  369,
      369,  369,  227,  227,  227,  227,  227,  227,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,   32,  227,  227,  227,  227,
      227,  228,  369,  369,  369,  369,  369,  369,  228,  228,
      228,  228,  228,  228,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  228,  228,  228,  228,  228,  229,  369,  369,
      369,  369,  369,  369,  229,  229,  229,  229,  229,  229,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  229,  229,
      229,  229,  229,  231,  369,  369,  369,  369,  369,  369,
      231,  231,  231,  231,  231,  231,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  231,  231,  231,  231,  231,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,   99,  369,  369,
      369,  369,  369,  369,   99,   99,   99,   99,   99,   99,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,   99,   99,

       99,   99,   99,  115,  115,  115,  115,  115,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  232,  369,  369,  369,  369,  369,  369,  232,  232,
      232,  232,  232,  232,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  232,  232,  232,  232,  232,  203,  203,  203,
      203,  203,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,   67,  369,  238,   68,  369,  369,  369,
      369,  369,  238,  238,  238,  238,  238,  238,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  167,  238,  238,  238,  238,
      238,  168,  168,  168,  168,  168,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  239,
      369,  369,  369,  369,  369,  369,  239,  239,  239,  239,
      239,  239,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      239,  239,  239,  239,  239,  206,  206,  206,  206,  206,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  240,  369,  369,  369,  369,  369,  369,
      240,  240,  240,  240,  240,  240,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  171,  240,  240,  240,  240,  240,  172,
      172,  172,  172,  172,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  241,  369,  369,
      369,  369,  369,  369,  241,  241,  241,  241,  241,  241,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  241,  241,
      241,  241,  241,  242,  369,  369,  369,  369,  369,  369,
      242,  242,  242,  242,  242,  242,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  242,  242,  242,  242,  242,  249,
      249,  249,  249,  255,  369,  257,  369,  369,  369,  257,
      257,  258,  369,  369,  369,  369,  369,  259,  369,  369,
      369,  369,  369,  369,  259,  259,  259,  259,  259,  259,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  260,  259,  259,
      259,  259,  259,   72,   72,   72,   72,   72,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  261,  369,  369,  369,  369,  369,  369,  261,  261,
      261,  261,  261,  261,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  261,  261,  261,  261,  261,   78,  137,  137,
      137,   78,  369,   25,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  263,  369,  369,  369,  369,
      369,  369,  263,  263,  263,  263,  263,  263,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,   26,  263,  263,  263,  263,
      263,  139,  139,  139,  139,  139,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  264,
      369,  369,  369,  369,  369,  369,  264,  264,  264,  264,

      264,  264,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,   82,
      264,  264,  264,  264,  264,  141,  141,  141,  141,  141,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,   67,  369,  265,   68,  369,  369,  369,  369,  369,
      265,  265,  265,  265,  265,  265,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,   84,  265,  265,  265,  265,  265,   85,
       85,   85,   85,   85,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,   67,  369,  266,   68,  369,

      369,  369,  369,  369,  266,  266,  266,  266,  266,  266,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,   84,  266,  266,
      266,  266,  266,   88,  144,  144,  144,   88,  369,  369,
      369,  369,  369,   25,  369,  369,  369,  369,  369,  369,
      369,  267,  369,  369,  369,  369,  369,  369,  267,  267,
      267,  267,  267,  267,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,   32,  267,  267,  267,  267,  267,  146,  146,  146,
      146,  146,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,   67,  369,  268,   68,  369,  369,  369,
      369,  369,  268,  268,  268,  268,  268,  268,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,   94,  268,  268,  268,  268,
      268,   95,   95,   95,   95,   95,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,   67,  369,  269,
       68,  369,  369,  369,  369,  369,  269,  269,  269,  269,
      269,  269,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,   94,
      269,  269,  269,  269,  269,  270,  369,  369,  369,  369,

      369,  369,  270,  270,  270,  270,  270,  270,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  270,  270,  270,  270,
      270,  271,  369,  369,  369,  369,  369,  369,  271,  271,
      271,  271,  271,  271,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  271,  271,  271,  271,  271,  276,  369,  369,
      369,  369,  369,  369,  276,  276,  276,  276,  276,  276,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  276,  276,

      276,  276,  276,  277,  369,  369,  369,  369,  369,  369,
      277,  277,  277,  277,  277,  277,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  277,  277,  277,  277,  277,  278,
      369,  369,  369,  369,  369,  369,  278,  278,  278,  278,
      278,  278,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      278,  278,  278,  278,  278,  279,  369,  369,  369,  369,
      369,  369,  279,  279,  279,  279,  279,  279,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  279,  279,  279,  279,
      279,  280,  369,  369,  369,  369,  369,  369,  280,  280,
      280,  280,  280,  280,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  280,  280,  280,  280,  280,  250,  250,  250,
      290,  369,  369,  292,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  293,  369,  369,  369,  369,
      369,  369,  293,  293,  293,  293,  293,  293,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  294,  293,  293,  293,  293,

      293,  253,  253,  253,  295,  369,  369,  369,  369,  369,
      369,  297,  369,  369,  369,  369,  369,  369,  369,  298,
      369,  369,  369,  369,  369,  369,  298,  298,  298,  298,
      298,  298,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  299,
      298,  298,  298,  298,  298,  255,  255,  255,  255,  255,
      369,  369,  369,  369,  369,  369,  369,  219,  369,  369,
      369,  369,  369,  300,  369,  369,  369,  369,  369,  369,
      300,  300,  300,  300,  300,  300,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  220,  300,  300,  300,  300,  300,  249,
      249,  249,  249,  255,  369,  257,  369,  369,  369,  257,
      257,  258,  369,  369,  369,  369,  369,  259,  369,  369,
      369,  369,  369,  369,  259,  259,  259,  259,  259,  259,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  260,  259,  259,
      259,  259,  259,   72,   72,   72,   72,   72,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  301,  369,  369,  369,  369,  369,  369,  301,  301,
      301,  301,  301,  301,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  301,  301,  301,  301,  301,   78,  137,  137,
      137,   78,  369,   25,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  303,  369,  369,  369,  369,
      369,  369,  303,  303,  303,  303,  303,  303,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,   26,  303,  303,  303,  303,
      303,  139,  139,  139,  139,  139,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  304,
      369,  369,  369,  369,  369,  369,  304,  304,  304,  304,

      304,  304,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,   82,
      304,  304,  304,  304,  304,  141,  141,  141,  141,  141,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,   67,  369,  305,   68,  369,  369,  369,  369,  369,
      305,  305,  305,  305,  305,  305,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,   84,  305,  305,  305,  305,  305,   85,
       85,   85,   85,   85,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,   67,  369,  306,   68,  369,

      369,  369,  369,  369,  306,  306,  306,  306,  306,  306,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,   84,  306,  306,
      306,  306,  306,   88,  144,  144,  144,   88,  369,  369,
      369,  369,  369,   25,  369,  369,  369,  369,  369,  369,
      369,  307,  369,  369,  369,  369,  369,  369,  307,  307,
      307,  307,  307,  307,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,   32,  307,  307,  307,  307,  307,  146,  146,  146,
      146,  146,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,   67,  369,  308,   68,  369,  369,  369,
      369,  369,  308,  308,  308,  308,  308,  308,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,   94,  308,  308,  308,  308,
      308,   95,   95,   95,   95,   95,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,   67,  369,  309,
       68,  369,  369,  369,  369,  369,  309,  309,  309,  309,
      309,  309,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,   94,
      309,  309,  309,  309,  309,  152,  152,  152,  152,  152,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  310,  369,  369,  369,  369,  369,  369,
      310,  310,  310,  310,  310,  310,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  310,  310,  310,  310,  310,  115,
      115,  115,  115,  115,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  311,  369,  369,
      369,  369,  369,  369,  311,  311,  311,  311,  311,  311,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  311,  311,

      311,  311,  311,  315,  369,  369,  369,  369,  369,  369,
      315,  315,  315,  315,  315,  315,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  315,  315,  315,  315,  315,  316,
      369,  369,  369,  369,  369,  369,  316,  316,  316,  316,
      316,  316,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      316,  316,  316,  316,  316,  317,  369,  369,  369,  369,
      369,  369,  317,  317,  317,  317,  317,  317,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  317,  317,  317,  317,
      317,  318,  369,  369,  369,  369,  369,  369,  318,  318,
      318,  318,  318,  318,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  318,  318,  318,  318,  318,  319,  369,  369,
      369,  369,  369,  369,  319,  319,  319,  319,  319,  319,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  319,  319,
      319,  319,  319,  291,  330,  330,  330,  291,  369,  251,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  331,  369,  369,  369,  369,  369,  369,  331,  331,
      331,  331,  331,  331,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  252,  331,  331,  331,  331,  331,  250,  250,  250,
      290,  369,  369,  292,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  293,  369,  369,  369,  369,
      369,  369,  293,  293,  293,  293,  293,  293,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  294,  293,  293,  293,  293,
      293,  296,  334,  334,  334,  296,  369,  369,  369,  369,

      369,  251,  369,  369,  369,  369,  369,  369,  369,  335,
      369,  369,  369,  369,  369,  369,  335,  335,  335,  335,
      335,  335,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  254,
      335,  335,  335,  335,  335,  253,  253,  253,  295,  369,
      369,  369,  369,  369,  369,  297,  369,  369,  369,  369,
      369,  369,  369,  298,  369,  369,  369,  369,  369,  369,
      298,  298,  298,  298,  298,  298,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  299,  298,  298,  298,  298,  298,  255,

      255,  255,  255,  255,  369,  369,  369,  369,  369,  369,
      369,  219,  369,  369,  369,  369,  369,  336,  369,  369,
      369,  369,  369,  369,  336,  336,  336,  336,  336,  336,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  220,  336,  336,
      336,  336,  336,   66,  369,  369,  369,  369,  369,  369,
       66,   66,   66,   66,   66,   66,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,   66,   66,   66,   66,   66,  139,
      139,  139,  139,  139,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  338,  369,  369,
      369,  369,  369,  369,  338,  338,  338,  338,  338,  338,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,   82,  338,  338,
      338,  338,  338,  141,  141,  141,  141,  141,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  339,  369,  369,  369,  369,  369,  369,  339,  339,
      339,  339,  339,  339,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  339,  339,  339,  339,  339,  146,  146,  146,

      146,  146,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  340,  369,  369,  369,  369,
      369,  369,  340,  340,  340,  340,  340,  340,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  340,  340,  340,  340,
      340,  341,  369,  369,  369,  369,  369,  369,  341,  341,
      341,  341,  341,  341,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  341,  341,  341,  341,  341,  115,  115,  115,
      115,  115,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,   99,  369,  369,  369,  369,
      369,  369,   99,   99,   99,   99,   99,   99,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,   99,   99,   99,   99,
       99,  203,  203,  203,  203,  203,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  344,
      369,  369,  369,  369,  369,  369,  344,  344,  344,  344,
      344,  344,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      344,  344,  344,  344,  344,  168,  168,  168,  168,  168,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  345,  369,  369,  369,  369,  369,  369,
      345,  345,  345,  345,  345,  345,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  345,  345,  345,  345,  345,  346,
      369,  369,  369,  369,  369,  369,  346,  346,  346,  346,
      346,  346,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      346,  346,  346,  346,  346,  347,  369,  369,  369,  369,
      369,  369,  347,  347,  347,  347,  347,  347,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  347,  347,  347,  347,
      347,  349,  369,  369,  369,  369,  369,  369,  349,  349,
      349,  349,  349,  349,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  349,  349,  349,  349,  349,  350,  369,  369,
      369,  369,  369,  369,  350,  350,  350,  350,  350,  350,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  350,  350,
      350,  350,  350,  255,  255,  255,  255,  255,  369,  369,

      369,  369,  369,  369,  369,  219,  369,  369,  369,  369,
      369,  351,  369,  369,  369,  369,  369,  369,  351,  351,
      351,  351,  351,  351,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  220,  351,  351,  351,  351,  351,   28,  369,  369,
      369,  369,  369,  369,   28,   28,   28,   28,   28,   28,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,   28,   28,
       28,   28,   28,  355,  369,  369,  369,  369,  369,  369,
      355,  355,  355,  355,  355,  355,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  355,  355,  355,  355,  355,  166,
      369,  369,  369,  369,  369,  369,  166,  166,  166,  166,
      166,  166,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      166,  166,  166,  166,  166,  356,  369,  369,  369,  369,
      369,  369,  356,  356,  356,  356,  356,  356,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  356,  356,  356,  356,
      356,  170,  369,  369,  369,  369,  369,  369,  170,  170,

      170,  170,  170,  170,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  170,  170,  170,  170,  170,  358,  369,  369,
      369,  369,  369,  369,  358,  358,  358,  358,  358,  358,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  358,  358,
      358,  358,  358,  359,  369,  369,  369,  369,  369,  369,
      359,  359,  359,  359,  359,  359,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  359,  359,  359,  359,  359,  360,

      369,  369,  369,  369,  369,  369,  360,  360,  360,  360,
      360,  360,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      360,  360,  360,  360,  360,  362,  369,  369,  369,  369,
      369,  369,  362,  362,  362,  362,  362,  362,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  362,  362,  362,  362,
      362,  363,  369,  369,  369,  369,  369,  369,  363,  363,
      363,  363,  363,  363,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  363,  363,  363,  363,  363,  364,  369,  369,
      369,  369,  369,  369,  364,  364,  364,  364,  364,  364,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  364,  364,
      364,  364,  364,  366,  369,  369,  369,  369,  369,  369,
      366,  366,  366,  366,  366,  366,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  366,  366,  366,  366,  366,  367,
      369,  369,  369,  369,  369,  369,  367,  367,  367,  367,
      367,  367,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      367,  367,  367,  367,  367,   24,  369,  369,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   29,
      369,   29,  369,  369,   29,   29,   31,  369,  369,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       36,   36,   36,  369,  369,   36,   36,   40,  369,   40,
      369,  369,   40,   40,   66,   66,   66,   66,   66,  369,
       66,   66,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   28,  369,   28,

      369,  369,   28,   28,   83,   83,   83,   83,  369,   83,
       83,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   93,   93,   93,   93,
      369,   93,   93,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   99,
      369,   99,  369,  369,   99,   99,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  125,  369,  369,
      369,  369,  125,  125,  128,  369,  369,  369,  369,  128,

      128,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  132,  369,  132,  132,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  166,  166,  166,  166,  369,
      166,  166,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  170,  369,  170,  369,  369,  170,  170,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  176,  369,  176,  369,  176,  176,   24,  369,  369,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   28,  369,   28,  369,  369,   28,   28,   31,  369,
      369,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  211,  369,  211,  369,  211,  211,
      216,  216,  216,  216,  216,  216,  369,  216,  216,  216,
      216,  216,  216,  216,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   28,   28,
       28,   28,  369,  369,  369,   28,  369,   28,  369,  369,
       28,   28,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  244,  369,  244,  369,  244,  244,  216,  216,
      216,  216,  216,  216,  369,  216,  216,  216,  216,  216,

      216,  216,  250,  369,  369,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  253,  369,  369,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   28,   28,
       28,   28,  369,  369,  369,   28,  369,   28,  369,  369,
       28,   28,   83,   83,   83,   83,  369,  369,  369,   83,
       83,   83,   83,  369,   83,   83,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       93,   93,   93,   93,  369,  369,  369,   93,   93,   93,
       93,  369,   93,   93,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  282,
      369,  282,  369,  282,  282,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  216,  216,  216,  216,  216,  369,  369,
      216,  216,  216,  216,  216,  216,  216,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   28,   28,   28,   28,  369,
      369,  369,   28,  369,   28,  369,  369,   28,   28,   83,
       83,   83,   83,  369,  369,  369,   83,   83,   83,   83,
      369,   83,   83,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   93,   93,   93,
       93,  369,  369,  369,   93,   93,   93,   93,  369,   93,
       93,  321,  369,  321,  369,  321,  321,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  253,  253,  369,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  216,
      216,  216,  216,  216,  369,  369,  216,  216,  216,  216,
      216,  216,  216,    3,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369

    } ;

static yyconst flex_int16_t yy_chk[6701] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    6,    6,    6,    6,    6,    8,    9,   10,   23,
        9,   11,   11,   24,   11,   17,   12,   63,   27,   12,

       17,   27,   31,   17,   22,   22,   22,   22,   22,   29,
       38,   23,   29,   38,   39,   47,   39,  132,  321,   59,
        9,   63,   46,   60,   11,  132,   10,  287,    8,   12,
       14,   27,   17,   46,   47,   24,   14,   14,   47,   14,
       31,   29,   59,   38,   46,   60,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   40,   50,   50,   40,   14,   16,   52,   62,   16,

       18,  286,   16,   18,   49,   18,   16,   16,   18,   16,
       36,   49,   61,   52,   50,   36,   64,   51,   36,   16,
       52,   62,   16,   40,   48,   16,   49,   51,   16,   16,
       18,   16,   88,   48,   61,   48,   66,   18,   67,   51,
       64,   66,   68,   72,   66,   53,   48,   36,   72,  176,
       53,   72,   18,   19,  118,   48,   53,  176,   54,   55,
       19,   19,   19,   19,   19,   19,   78,   53,   79,  137,
       88,   67,   53,   66,   54,   68,  285,   54,  118,   54,
       72,   54,   55,   55,   19,   19,   19,   19,   19,   26,
       26,   26,   26,   89,  284,   26,   54,   71,   77,   54,

       87,   83,   71,   77,   83,   71,  200,   26,   78,   87,
       79,  137,  211,  119,   26,   26,   26,   26,   26,   26,
      211,  144,   71,  217,   85,   93,   95,   85,   93,   95,
      200,   89,   98,   83,   71,  119,   98,   26,   26,   26,
       26,   26,   26,   30,   71,   77,  102,   87,  105,  283,
       30,   30,   30,   30,   30,   30,   85,   93,   95,  144,
      124,  108,  108,  102,  114,  217,  120,  121,  123,  102,
      122,  105,  105,  136,   30,   30,   30,   30,   30,   32,
       32,   32,   32,  108,  114,  385,  385,  114,  120,   32,
      121,  123,  122,  124,  150,  190,  136,   32,  150,  190,

      248,  218,  155,  163,   32,   32,   32,   32,   32,   32,
      130,  134,  160,  161,  125,  130,  134,  125,  130,  134,
      141,  146,  155,  141,  146,  155,  163,   32,   32,   32,
       32,   32,   32,   37,  160,  161,  162,  164,  165,  218,
       37,   37,   37,   37,   37,   37,  125,  130,  134,  181,
      197,  166,  141,  146,  166,  250,  168,  291,  162,  168,
      164,  165,  199,  201,   37,   37,   37,   37,   37,   41,
      192,  181,  197,  222,  192,  233,   41,   41,   41,   41,
       41,   41,  230,  166,  199,  201,  230,  234,  168,  235,
      247,  203,  246,  253,  203,  222,  245,  250,  233,  291,

       41,   41,   41,   41,   41,   57,  410,  237,  273,  410,
      234,  235,   57,   57,   57,   57,   57,   57,  179,  179,
      179,  179,  179,  203,  179,  244,  282,  295,  179,  237,
      179,  253,  273,  244,  282,  214,   57,   57,   57,   57,
       57,   69,  249,  249,  249,  249,  249,  262,   69,   69,
       69,   69,   69,   69,  249,  251,  251,  251,  251,  251,
      272,  275,  302,  290,  313,  295,  179,  251,  290,  262,
      337,  314,   69,   69,   69,   69,   69,   73,   73,   73,
       73,   73,  272,  417,  302,  275,  417,  313,   73,  399,
      399,  213,  337,   73,  314,   73,   73,  288,  288,  288,

      288,  288,   73,   73,   73,   73,   73,   73,  296,  288,
      290,  319,  319,  319,  319,  319,  342,  296,  303,  303,
      303,  303,  303,  329,  303,   73,   73,   73,   73,   73,
       73,   80,   80,   80,   80,   80,  212,   80,  352,  342,
      206,  215,  215,  215,  215,  215,  198,  215,  330,   80,
      193,  215,  191,  215,  333,  296,   80,   80,   80,   80,
       80,   80,  352,  333,  429,  329,  303,  429,  307,  307,
      307,  307,  307,  341,  341,  341,  341,  341,  307,   80,
       80,   80,   80,   80,   80,   81,   81,   81,   81,  215,
      330,   81,  216,  216,  216,  216,  216,  189,  216,  178,

      343,  333,  216,   81,  216,  255,  255,  255,  255,  255,
       81,   81,   81,   81,   81,   81,  307,  255,  256,  256,
      256,  256,  256,  343,  355,  355,  355,  355,  355,  177,
      256,  172,  361,   81,   81,   81,   81,   81,   81,   82,
      216,  440,  446,  334,  440,  446,   82,   82,   82,   82,
       82,   82,  334,  255,  361,  257,  257,  257,  257,  257,
      356,  356,  356,  356,  356,  447,  256,  257,  447,  365,
       82,   82,   82,   82,   82,   84,  258,  258,  258,  258,
      258,  170,   84,   84,   84,   84,   84,   84,  258,  157,
      334,  365,  156,  154,  366,  366,  366,  366,  366,  152,

      366,  149,  139,  257,  133,  128,   84,   84,   84,   84,
       84,   86,   86,   86,   86,   86,  127,  117,  115,  113,
      112,  111,  110,  109,  258,  107,  106,   86,  104,   86,
       86,  103,  101,   99,   97,   76,   86,   86,   86,   86,
       86,   86,  366,   70,   58,   56,   45,   44,   42,   34,
       33,   28,   21,   20,  306,  306,  306,  306,  306,   86,
       86,   86,   86,   86,   86,   90,   90,   90,   90,   90,
      306,   15,   13,  306,    7,   90,  292,  292,  292,  292,
      292,    3,  292,   90,    0,    0,    0,    0,  292,    0,
       90,   90,   90,   90,   90,   90,    0,    0,    0,    0,

        0,    0,  306,    0,    0,    0,    0,  309,  309,  309,
      309,  309,    0,   90,   90,   90,   90,   90,   90,   91,
       91,   91,   91,  309,  292,    0,  309,    0,    0,   91,
      297,  297,  297,  297,  297,    0,    0,   91,    0,    0,
      297,    0,  297,    0,   91,   91,   91,   91,   91,   91,
      328,  328,  328,  328,  328,  309,  328,    0,    0,    0,
        0,    0,  328,    0,    0,    0,    0,   91,   91,   91,
       91,   91,   91,   94,    0,    0,    0,    0,  297,    0,
       94,   94,   94,   94,   94,   94,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  328,  339,

      339,  339,  339,  339,   94,   94,   94,   94,   94,   96,
       96,   96,   96,   96,    0,  339,    0,    0,  339,  332,
      332,  332,  332,  332,    0,   96,    0,   96,   96,  332,
        0,  332,    0,    0,   96,   96,   96,   96,   96,   96,
        0,    0,    0,    0,    0,    0,    0,  339,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   96,   96,   96,
       96,   96,   96,  100,    0,    0,    0,  332,    0,    0,
      100,  100,  100,  100,  100,  100,    0,    0,    0,    0,
        0,    0,    0,  367,  367,  367,  367,  367,  340,  340,
      340,  340,  340,  367,  100,  100,  100,  100,  100,  116,

      116,  116,  116,  116,  340,    0,    0,  340,  364,  364,
      364,  364,  364,    0,    0,    0,    0,  116,    0,    0,
      364,    0,    0,    0,  116,  116,  116,  116,  116,  116,
        0,  367,    0,    0,    0,    0,  340,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  116,  116,  116,
      116,  116,  116,  126,    0,    0,  364,    0,    0,    0,
      126,  126,  126,  126,  126,  126,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  126,  126,  126,  126,  126,  129,
        0,    0,    0,    0,    0,    0,  129,  129,  129,  129,

      129,  129,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      129,  129,  129,  129,  129,  131,  131,  131,  131,  131,
        0,    0,    0,    0,    0,    0,  131,    0,    0,    0,
        0,  131,    0,  131,  131,    0,    0,    0,    0,    0,
      131,  131,  131,  131,  131,  131,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  131,  131,  131,  131,  131,  131,  135,
      135,  135,  135,  135,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  135,    0,    0,

        0,    0,    0,    0,  135,  135,  135,  135,  135,  135,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  135,  135,
      135,  135,  135,  138,  138,  138,  138,  138,    0,  138,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  138,    0,    0,    0,    0,    0,    0,  138,  138,
      138,  138,  138,  138,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  138,  138,  138,  138,  138,  138,  140,  140,  140,
      140,  140,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  140,    0,    0,    0,    0,
        0,    0,  140,  140,  140,  140,  140,  140,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  140,  140,  140,  140,  140,
      140,  142,  142,  142,  142,  142,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  142,    0,  142,
      142,    0,    0,    0,    0,    0,  142,  142,  142,  142,
      142,  142,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  142,
      142,  142,  142,  142,  142,  143,  143,  143,  143,  143,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  143,    0,    0,    0,    0,    0,    0,
      143,  143,  143,  143,  143,  143,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  143,  143,  143,  143,  143,  145,
      145,  145,  145,  145,    0,    0,    0,    0,    0,  145,
        0,    0,    0,    0,    0,    0,    0,  145,    0,    0,
        0,    0,    0,    0,  145,  145,  145,  145,  145,  145,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  145,  145,  145,

      145,  145,  145,  147,  147,  147,  147,  147,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  147,    0,    0,    0,    0,    0,    0,  147,  147,
      147,  147,  147,  147,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  147,  147,  147,  147,  147,  148,  148,  148,
      148,  148,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  148,    0,    0,    0,    0,
        0,    0,  148,  148,  148,  148,  148,  148,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  148,  148,  148,  148,
      148,  153,  153,  153,  153,  153,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  153,
        0,    0,    0,    0,    0,    0,  153,  153,  153,  153,
      153,  153,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      153,  153,  153,  153,  153,  158,  158,  158,  158,  158,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  158,    0,    0,    0,    0,    0,    0,
      158,  158,  158,  158,  158,  158,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  158,  158,  158,  158,  158,  167,
        0,    0,    0,    0,    0,    0,  167,  167,  167,  167,
      167,  167,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      167,  167,  167,  167,  167,  169,  169,  169,  169,  169,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  169,    0,  169,  169,    0,    0,    0,    0,    0,
      169,  169,  169,  169,  169,  169,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  169,  169,  169,  169,  169,  169,  171,
        0,    0,    0,    0,    0,    0,  171,  171,  171,  171,
      171,  171,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      171,  171,  171,  171,  171,  173,  173,  173,  173,  173,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  173,    0,    0,    0,    0,    0,    0,
      173,  173,  173,  173,  173,  173,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  173,  173,  173,  173,  173,  173,  174,

        0,    0,    0,    0,    0,    0,  174,  174,  174,  174,
      174,  174,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      174,  174,  174,  174,  174,  180,  180,  180,  180,  180,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  180,    0,    0,    0,    0,    0,    0,
      180,  180,  180,  180,  180,  180,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  180,  180,  180,  180,  180,  182,
      182,  182,  182,  182,    0,  182,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  182,    0,    0,
        0,    0,    0,    0,  182,  182,  182,  182,  182,  182,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  182,  182,  182,
      182,  182,  182,  183,  183,  183,  183,  183,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  183,    0,    0,    0,    0,    0,    0,  183,  183,
      183,  183,  183,  183,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  183,  183,  183,  183,  183,  183,  184,    0,    0,

        0,    0,    0,    0,  184,  184,  184,  184,  184,  184,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  184,  184,
      184,  184,  184,  185,  185,  185,  185,  185,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  185,    0,    0,    0,    0,    0,    0,  185,  185,
      185,  185,  185,  185,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  185,  185,  185,  185,  185,  186,  186,  186,
      186,  186,    0,    0,    0,    0,    0,  186,    0,    0,

        0,    0,    0,    0,    0,  186,    0,    0,    0,    0,
        0,    0,  186,  186,  186,  186,  186,  186,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  186,  186,  186,  186,  186,
      186,  187,    0,    0,    0,    0,    0,    0,  187,  187,
      187,  187,  187,  187,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  187,  187,  187,  187,  187,  188,    0,    0,
        0,    0,    0,    0,  188,  188,  188,  188,  188,  188,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  188,  188,
      188,  188,  188,  194,    0,    0,    0,    0,    0,    0,
      194,  194,  194,  194,  194,  194,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  194,  194,  194,  194,  194,  195,
      195,  195,  195,  195,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  195,    0,    0,
        0,    0,    0,    0,  195,  195,  195,  195,  195,  195,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  195,  195,

      195,  195,  195,  196,  196,  196,  196,  196,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  196,    0,    0,    0,    0,    0,    0,  196,  196,
      196,  196,  196,  196,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  196,  196,  196,  196,  196,  204,  204,  204,
      204,  204,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  204,    0,  204,  204,    0,    0,    0,
        0,    0,  204,  204,  204,  204,  204,  204,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  204,  204,  204,  204,  204,
      204,  205,  205,  205,  205,  205,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  205,
        0,    0,    0,    0,    0,    0,  205,  205,  205,  205,
      205,  205,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      205,  205,  205,  205,  205,  207,  207,  207,  207,  207,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  207,    0,    0,    0,    0,    0,    0,
      207,  207,  207,  207,  207,  207,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  207,  207,  207,  207,  207,  207,  208,
      208,  208,  208,  208,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  208,    0,    0,
        0,    0,    0,    0,  208,  208,  208,  208,  208,  208,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  208,  208,
      208,  208,  208,  209,    0,    0,    0,    0,    0,    0,
      209,  209,  209,  209,  209,  209,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  209,  209,  209,  209,  209,  220,
      220,  220,  220,  220,    0,  220,    0,    0,    0,  220,
      220,  220,    0,    0,    0,    0,    0,  220,    0,    0,
        0,    0,    0,    0,  220,  220,  220,  220,  220,  220,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  220,  220,  220,
      220,  220,  220,  221,  221,  221,  221,  221,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  221,    0,    0,    0,    0,    0,    0,  221,  221,
      221,  221,  221,  221,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  221,  221,  221,  221,  221,  223,  223,  223,
      223,  223,    0,  223,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  223,    0,    0,    0,    0,
        0,    0,  223,  223,  223,  223,  223,  223,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  223,  223,  223,  223,  223,
      223,  224,  224,  224,  224,  224,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  224,
        0,    0,    0,    0,    0,    0,  224,  224,  224,  224,

      224,  224,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  224,
      224,  224,  224,  224,  224,  225,  225,  225,  225,  225,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  225,    0,  225,  225,    0,    0,    0,    0,    0,
      225,  225,  225,  225,  225,  225,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  225,  225,  225,  225,  225,  225,  226,
      226,  226,  226,  226,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  226,    0,  226,  226,    0,

        0,    0,    0,    0,  226,  226,  226,  226,  226,  226,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  226,  226,  226,
      226,  226,  226,  227,  227,  227,  227,  227,    0,    0,
        0,    0,    0,  227,    0,    0,    0,    0,    0,    0,
        0,  227,    0,    0,    0,    0,    0,    0,  227,  227,
      227,  227,  227,  227,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  227,  227,  227,  227,  227,  227,  228,  228,  228,
      228,  228,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  228,    0,  228,  228,    0,    0,    0,
        0,    0,  228,  228,  228,  228,  228,  228,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  228,  228,  228,  228,  228,
      228,  229,  229,  229,  229,  229,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  229,    0,  229,
      229,    0,    0,    0,    0,    0,  229,  229,  229,  229,
      229,  229,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  229,
      229,  229,  229,  229,  229,  231,    0,    0,    0,    0,

        0,    0,  231,  231,  231,  231,  231,  231,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  231,  231,  231,  231,
      231,  232,    0,    0,    0,    0,    0,    0,  232,  232,
      232,  232,  232,  232,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  232,  232,  232,  232,  232,  238,    0,    0,
        0,    0,    0,    0,  238,  238,  238,  238,  238,  238,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  238,  238,

      238,  238,  238,  239,    0,    0,    0,    0,    0,    0,
      239,  239,  239,  239,  239,  239,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  239,  239,  239,  239,  239,  240,
        0,    0,    0,    0,    0,    0,  240,  240,  240,  240,
      240,  240,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      240,  240,  240,  240,  240,  241,    0,    0,    0,    0,
        0,    0,  241,  241,  241,  241,  241,  241,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  241,  241,  241,  241,
      241,  242,    0,    0,    0,    0,    0,    0,  242,  242,
      242,  242,  242,  242,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  242,  242,  242,  242,  242,  252,  252,  252,
      252,    0,    0,  252,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  252,    0,    0,    0,    0,
        0,    0,  252,  252,  252,  252,  252,  252,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  252,  252,  252,  252,  252,

      252,  254,  254,  254,  254,    0,    0,    0,    0,    0,
        0,  254,    0,    0,    0,    0,    0,    0,    0,  254,
        0,    0,    0,    0,    0,    0,  254,  254,  254,  254,
      254,  254,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  254,
      254,  254,  254,  254,  254,  259,  259,  259,  259,  259,
        0,    0,    0,    0,    0,    0,    0,  259,    0,    0,
        0,    0,    0,  259,    0,    0,    0,    0,    0,    0,
      259,  259,  259,  259,  259,  259,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  259,  259,  259,  259,  259,  259,  260,
      260,  260,  260,  260,    0,  260,    0,    0,    0,  260,
      260,  260,    0,    0,    0,    0,    0,  260,    0,    0,
        0,    0,    0,    0,  260,  260,  260,  260,  260,  260,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  260,  260,  260,
      260,  260,  260,  261,  261,  261,  261,  261,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  261,    0,    0,    0,    0,    0,    0,  261,  261,
      261,  261,  261,  261,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  261,  261,  261,  261,  261,  263,  263,  263,
      263,  263,    0,  263,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  263,    0,    0,    0,    0,
        0,    0,  263,  263,  263,  263,  263,  263,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  263,  263,  263,  263,  263,
      263,  264,  264,  264,  264,  264,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  264,
        0,    0,    0,    0,    0,    0,  264,  264,  264,  264,

      264,  264,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  264,
      264,  264,  264,  264,  264,  265,  265,  265,  265,  265,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  265,    0,  265,  265,    0,    0,    0,    0,    0,
      265,  265,  265,  265,  265,  265,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  265,  265,  265,  265,  265,  265,  266,
      266,  266,  266,  266,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  266,    0,  266,  266,    0,

        0,    0,    0,    0,  266,  266,  266,  266,  266,  266,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  266,  266,  266,
      266,  266,  266,  267,  267,  267,  267,  267,    0,    0,
        0,    0,    0,  267,    0,    0,    0,    0,    0,    0,
        0,  267,    0,    0,    0,    0,    0,    0,  267,  267,
      267,  267,  267,  267,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  267,  267,  267,  267,  267,  267,  268,  268,  268,
      268,  268,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  268,    0,  268,  268,    0,    0,    0,
        0,    0,  268,  268,  268,  268,  268,  268,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  268,  268,  268,  268,  268,
      268,  269,  269,  269,  269,  269,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  269,    0,  269,
      269,    0,    0,    0,    0,    0,  269,  269,  269,  269,
      269,  269,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  269,
      269,  269,  269,  269,  269,  270,  270,  270,  270,  270,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  270,    0,    0,    0,    0,    0,    0,
      270,  270,  270,  270,  270,  270,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  270,  270,  270,  270,  270,  271,
      271,  271,  271,  271,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  271,    0,    0,
        0,    0,    0,    0,  271,  271,  271,  271,  271,  271,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  271,  271,

      271,  271,  271,  276,    0,    0,    0,    0,    0,    0,
      276,  276,  276,  276,  276,  276,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  276,  276,  276,  276,  276,  277,
        0,    0,    0,    0,    0,    0,  277,  277,  277,  277,
      277,  277,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      277,  277,  277,  277,  277,  278,    0,    0,    0,    0,
        0,    0,  278,  278,  278,  278,  278,  278,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  278,  278,  278,  278,
      278,  279,    0,    0,    0,    0,    0,    0,  279,  279,
      279,  279,  279,  279,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  279,  279,  279,  279,  279,  280,    0,    0,
        0,    0,    0,    0,  280,  280,  280,  280,  280,  280,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  280,  280,
      280,  280,  280,  293,  293,  293,  293,  293,    0,  293,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  293,    0,    0,    0,    0,    0,    0,  293,  293,
      293,  293,  293,  293,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  293,  293,  293,  293,  293,  293,  294,  294,  294,
      294,    0,    0,  294,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  294,    0,    0,    0,    0,
        0,    0,  294,  294,  294,  294,  294,  294,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  294,  294,  294,  294,  294,
      294,  298,  298,  298,  298,  298,    0,    0,    0,    0,

        0,  298,    0,    0,    0,    0,    0,    0,    0,  298,
        0,    0,    0,    0,    0,    0,  298,  298,  298,  298,
      298,  298,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  298,
      298,  298,  298,  298,  298,  299,  299,  299,  299,    0,
        0,    0,    0,    0,    0,  299,    0,    0,    0,    0,
        0,    0,    0,  299,    0,    0,    0,    0,    0,    0,
      299,  299,  299,  299,  299,  299,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  299,  299,  299,  299,  299,  299,  300,

      300,  300,  300,  300,    0,    0,    0,    0,    0,    0,
        0,  300,    0,    0,    0,    0,    0,  300,    0,    0,
        0,    0,    0,    0,  300,  300,  300,  300,  300,  300,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  300,  300,  300,
      300,  300,  300,  301,    0,    0,    0,    0,    0,    0,
      301,  301,  301,  301,  301,  301,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  301,  301,  301,  301,  301,  304,
      304,  304,  304,  304,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  304,    0,    0,
        0,    0,    0,    0,  304,  304,  304,  304,  304,  304,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  304,  304,  304,
      304,  304,  304,  305,  305,  305,  305,  305,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  305,    0,    0,    0,    0,    0,    0,  305,  305,
      305,  305,  305,  305,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  305,  305,  305,  305,  305,  308,  308,  308,

      308,  308,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  308,    0,    0,    0,    0,
        0,    0,  308,  308,  308,  308,  308,  308,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  308,  308,  308,  308,
      308,  310,    0,    0,    0,    0,    0,    0,  310,  310,
      310,  310,  310,  310,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  310,  310,  310,  310,  310,  311,  311,  311,
      311,  311,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  311,    0,    0,    0,    0,
        0,    0,  311,  311,  311,  311,  311,  311,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  311,  311,  311,  311,
      311,  315,  315,  315,  315,  315,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  315,
        0,    0,    0,    0,    0,    0,  315,  315,  315,  315,
      315,  315,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      315,  315,  315,  315,  315,  316,  316,  316,  316,  316,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  316,    0,    0,    0,    0,    0,    0,
      316,  316,  316,  316,  316,  316,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  316,  316,  316,  316,  316,  317,
        0,    0,    0,    0,    0,    0,  317,  317,  317,  317,
      317,  317,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      317,  317,  317,  317,  317,  318,    0,    0,    0,    0,
        0,    0,  318,  318,  318,  318,  318,  318,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  318,  318,  318,  318,
      318,  331,    0,    0,    0,    0,    0,    0,  331,  331,
      331,  331,  331,  331,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  331,  331,  331,  331,  331,  335,    0,    0,
        0,    0,    0,    0,  335,  335,  335,  335,  335,  335,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  335,  335,
      335,  335,  335,  336,  336,  336,  336,  336,    0,    0,

        0,    0,    0,    0,    0,  336,    0,    0,    0,    0,
        0,  336,    0,    0,    0,    0,    0,    0,  336,  336,
      336,  336,  336,  336,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  336,  336,  336,  336,  336,  336,  338,    0,    0,
        0,    0,    0,    0,  338,  338,  338,  338,  338,  338,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  338,  338,
      338,  338,  338,  344,    0,    0,    0,    0,    0,    0,
      344,  344,  344,  344,  344,  344,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  344,  344,  344,  344,  344,  345,
        0,    0,    0,    0,    0,    0,  345,  345,  345,  345,
      345,  345,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      345,  345,  345,  345,  345,  346,    0,    0,    0,    0,
        0,    0,  346,  346,  346,  346,  346,  346,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  346,  346,  346,  346,
      346,  347,    0,    0,    0,    0,    0,    0,  347,  347,

      347,  347,  347,  347,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  347,  347,  347,  347,  347,  349,    0,    0,
        0,    0,    0,    0,  349,  349,  349,  349,  349,  349,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  349,  349,
      349,  349,  349,  350,    0,    0,    0,    0,    0,    0,
      350,  350,  350,  350,  350,  350,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  350,  350,  350,  350,  350,  351,

        0,    0,    0,    0,    0,    0,  351,  351,  351,  351,
      351,  351,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      351,  351,  351,  351,  351,  358,    0,    0,    0,    0,
        0,    0,  358,  358,  358,  358,  358,  358,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  358,  358,  358,  358,
      358,  359,    0,    0,    0,    0,    0,    0,  359,  359,
      359,  359,  359,  359,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  359,  359,  359,  359,  359,  360,    0,    0,
        0,    0,    0,    0,  360,  360,  360,  360,  360,  360,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  360,  360,
      360,  360,  360,  362,    0,    0,    0,    0,    0,    0,
      362,  362,  362,  362,  362,  362,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  362,  362,  362,  362,  362,  363,
        0,    0,    0,    0,    0,    0,  363,  363,  363,  363,
      363,  363,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      363,  363,  363,  363,  363,  370,    0,    0,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  371,
        0,  371,    0,    0,  371,  371,  372,    0,    0,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      373,  373,  373,    0,    0,  373,  373,  374,    0,  374,
        0,    0,  374,  374,  375,  375,  375,  375,  375,    0,
      375,  375,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  378,    0,  378,

        0,    0,  378,  378,  379,  379,  379,  379,    0,  379,
      379,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  382,  382,  382,  382,
        0,  382,  382,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  386,
        0,  386,    0,    0,  386,  386,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  388,    0,    0,
        0,    0,  388,  388,  389,    0,    0,    0,    0,  389,

      389,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  391,    0,  391,  391,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  397,  397,  397,  397,    0,
      397,  397,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  400,    0,  400,    0,    0,  400,  400,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  402,    0,  402,    0,  402,  402,  403,    0,    0,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  404,    0,  404,    0,    0,  404,  404,  405,    0,
        0,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  409,  409,  409,  409,  409,  409,  409,

      409,  409,  409,  409,  411,    0,  411,    0,  411,  411,
      412,  412,  412,  412,  412,  412,    0,  412,  412,  412,
      412,  412,  412,  412,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  414,  414,
      414,  414,    0,    0,    0,  414,    0,  414,    0,    0,
      414,  414,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  418,    0,  418,    0,  418,  418,  419,  419,
      419,  419,  419,  419,    0,  419,  419,  419,  419,  419,

      419,  419,  420,    0,    0,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  421,    0,    0,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  424,  424,
      424,  424,    0,    0,    0,  424,    0,  424,    0,    0,
      424,  424,  425,  425,  425,  425,    0,    0,    0,  425,
      425,  425,  425,    0,  425,  425,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,

      427,  427,  427,  427,    0,    0,    0,  427,  427,  427,
      427,    0,  427,  427,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  430,
        0,  430,    0,  430,  430,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  433,  433,  433,  433,  433,    0,    0,
      433,  433,  433,  433,  433,  433,  433,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  435,  435,  436,  436,  436,  436,    0,
        0,    0,  436,    0,  436,    0,    0,  436,  436,  437,
      437,  437,  437,    0,    0,    0,  437,  437,  437,  437,
        0,  437,  437,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  439,  439,  439,
      439,    0,    0,    0,  439,  439,  439,  439,    0,  439,
      439,  441,    0,  441,    0,  441,  441,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  443,  443,    0,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  444,  444,  444,  444,  444,

      444,  444,  444,  444,  444,  444,  444,  444,  444,  445,
      445,  445,  445,  445,    0,    0,  445,  445,  445,  445,
      445,  445,  445,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int css_flex_debug;
int css_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *csstext;
#line 1 "css.grammar"
#line 2083 "lex.css.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int csslex_destroy (void );

int cssget_debug (void );

void cssset_debug (int debug_flag  );

YY_EXTRA_TYPE cssget_extra (void );

void cssset_extra (YY_EXTRA_TYPE user_defined  );

FILE *cssget_in (void );

void cssset_in  (FILE * in_str  );

FILE *cssget_out (void );

void cssset_out  (FILE * out_str  );

yy_size_t cssget_leng (void );

char *cssget_text (void );

int cssget_lineno (void );

void cssset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int csswrap (void );
#else
extern int csswrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( csstext, cssleng, 1, cssout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cssin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cssin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, cssin))==0 && ferror(cssin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cssin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int csslex (void);

#define YY_DECL int csslex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after csstext and cssleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 21 "css.grammar"


#line 2266 "lex.css.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cssin )
			cssin = stdin;

		if ( ! cssout )
			cssout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cssensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				css_create_buffer(cssin,YY_BUF_SIZE );
		}

		css_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of csstext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 370 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6624 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 23 "css.grammar"

	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 25 "css.grammar"
/* ignore comments */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 27 "css.grammar"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 28 "css.grammar"

	YY_BREAK
case 5:
YY_RULE_SETUP
#line 29 "css.grammar"

	YY_BREAK
case 6:
YY_RULE_SETUP
#line 30 "css.grammar"

	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 32 "css.grammar"
{cssConsume(csstext, CSSSTRING);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 34 "css.grammar"
{cssConsume(csstext, CSSIDENT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 36 "css.grammar"
{cssConsume(csstext, CSSHASH);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 38 "css.grammar"
{cssConsume(csstext, CSSIMPORT);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 39 "css.grammar"

	YY_BREAK
case 12:
YY_RULE_SETUP
#line 40 "css.grammar"
{cssConsume(csstext, CSSMEDIA);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 41 "css.grammar"

	YY_BREAK
case 14:
YY_RULE_SETUP
#line 42 "css.grammar"

	YY_BREAK
case 15:
YY_RULE_SETUP
#line 43 "css.grammar"

	YY_BREAK
case 16:
YY_RULE_SETUP
#line 45 "css.grammar"

	YY_BREAK
case 17:
YY_RULE_SETUP
#line 47 "css.grammar"
{cssConsume(csstext, CSSEMS);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 48 "css.grammar"
{cssConsume(csstext, CSSEXS);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 49 "css.grammar"
{cssConsume(csstext, CSSLENGTH);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 50 "css.grammar"
{cssConsume(csstext, CSSLENGTH);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 51 "css.grammar"
{cssConsume(csstext, CSSLENGTH);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 52 "css.grammar"
{cssConsume(csstext, CSSLENGTH);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 53 "css.grammar"
{cssConsume(csstext, CSSLENGTH);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 54 "css.grammar"
{cssConsume(csstext, CSSLENGTH);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 55 "css.grammar"
{cssConsume(csstext, CSSANGLE);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 56 "css.grammar"
{cssConsume(csstext, CSSANGLE);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 57 "css.grammar"
{cssConsume(csstext, CSSANGLE);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 58 "css.grammar"
{cssConsume(csstext, CSSTIME);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 59 "css.grammar"
{cssConsume(csstext, CSSTIME);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 60 "css.grammar"
{cssConsume(csstext, CSSFREQ);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 61 "css.grammar"
{cssConsume(csstext, CSSFREQ);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 62 "css.grammar"
{cssConsume(csstext, CSSDIMEN);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 63 "css.grammar"
{cssConsume(csstext, CSSPERCENTAGE);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 64 "css.grammar"
{cssConsume(csstext, CSSNUMBER);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 66 "css.grammar"
{cssConsume(csstext, CSSURI);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 67 "css.grammar"
{cssConsume(csstext, CSSURI);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 68 "css.grammar"
{cssConsume(csstext, CSSFUNCTION);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 70 "css.grammar"
{cssConsume(csstext, CSSUNICODERANGE);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 71 "css.grammar"
{cssConsume(csstext, CSSUNICODERANGE);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 73 "css.grammar"
{cssConsume(csstext, CSSUNKNOWN);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 75 "css.grammar"
ECHO;
	YY_BREAK
#line 2563 "lex.css.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cssin at a new source and called
			 * csslex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cssin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( csswrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * csstext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of csslex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cssrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cssrestart(cssin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cssrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 370 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 370 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 369);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cssrestart(cssin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( csswrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve csstext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cssrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cssensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            css_create_buffer(cssin,YY_BUF_SIZE );
	}

	css_init_buffer(YY_CURRENT_BUFFER,input_file );
	css_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void css_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		csspop_buffer_state();
	 *		csspush_buffer_state(new_buffer);
     */
	cssensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

  // This line looks to be a manual fix from flex output... Restore if you regenerate the file.
  if (yy_buffer_stack) {
    YY_CURRENT_BUFFER_LVALUE = new_buffer;
  }
	css_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (csswrap()) processing, but the only time this flag
	 * is looked at is after csswrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void css_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cssin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE css_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cssalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in css_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cssalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in css_create_buffer()" );

	b->yy_is_our_buffer = 1;

	css_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with css_create_buffer()
 * 
 */
    void css_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cssfree((void *) b->yy_ch_buf  );

	cssfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cssrestart() or at EOF.
 */
    static void css_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	css_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then css_init_buffer was _probably_
     * called from cssrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void css_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		css_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void csspush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cssensure_buffer_stack();

	/* This block is copied from css_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
  // This line looks to be a manual fix from flex output... Restore if you regenerate the file.
  if (yy_buffer_stack) {
    YY_CURRENT_BUFFER_LVALUE = new_buffer;
  }
  
	/* copied from css_switch_to_buffer. */
	css_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void csspop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	css_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		css_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cssensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
    const yy_size_t ptr_size = sizeof(struct yy_buffer_state*);
    const yy_size_t size_to_alloc = ptr_size /* * num_to_alloc */;
		(yy_buffer_stack) = (struct yy_buffer_state**)cssalloc(size_to_alloc);

    /* flex generates this, but the above 4 lines were here before, so I'm keeping them as is.
     * it would sure seem like num_to_alloc isn't getting set as it should in the above
		(yy_buffer_stack) = (struct yy_buffer_state**)cssalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
     */
    
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cssensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cssrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cssensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE css_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cssalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in css_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	css_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to csslex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       css_scan_bytes() instead.
 */
YY_BUFFER_STATE css_scan_string (yyconst char * yystr )
{
    
	return css_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to csslex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE css_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cssalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in css_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = css_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in css_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up csstext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		csstext[cssleng] = (yy_hold_char); \
		(yy_c_buf_p) = csstext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cssleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cssget_lineno  (void)
{
        
    return csslineno;
}

/** Get the input stream.
 * 
 */
FILE *cssget_in  (void)
{
        return cssin;
}

/** Get the output stream.
 * 
 */
FILE *cssget_out  (void)
{
        return cssout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t cssget_leng  (void)
{
        return cssleng;
}

/** Get the current token.
 * 
 */

char *cssget_text  (void)
{
        return csstext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cssset_lineno (int  line_number )
{
    
    csslineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see css_switch_to_buffer
 */
void cssset_in (FILE *  in_str )
{
        cssin = in_str ;
}

void cssset_out (FILE *  out_str )
{
        cssout = out_str ;
}

int cssget_debug  (void)
{
        return css_flex_debug;
}

void cssset_debug (int  bdebug )
{
        css_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from csslex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cssin = stdin;
    cssout = stdout;
#else
    cssin = (FILE *) 0;
    cssout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * csslex_init()
     */
    return 0;
}

/* csslex_destroy is for both reentrant and non-reentrant scanners. */
int csslex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		css_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		csspop_buffer_state();
	}

	/* Destroy the stack itself. */
	cssfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * csslex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cssalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cssrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cssfree (void * ptr )
{
	free( (char *) ptr );	/* see cssrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 75 "css.grammar"



int csswrap(void){return 1;}


